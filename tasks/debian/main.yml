---

- name: Wireguard | Installing WireGuard (can take some time)
  ansible.builtin.apt:
    pkg: "{{ WG_HC.packages }}"
    state: present
    update_cache: yes
  tags: [base]
  throttle: "{{ WG_CONFIG.continuous_installs }}"

- name: Wireguard | Preparing DNS-Util for docker container (1/2)
  ansible.builtin.apt:
    name: ['debconf-utils']
    state: present
  when:
    - ansible_virtualization_role is defined
    - ansible_virtualization_role == 'guest'
    - "'docker' in ansible_virtualization_tech_guest"

- name: Wireguard | Preparing DNS-Util for docker container (2/2)
  ansible.builtin.command:
    cmd: 'debconf-set-selections'
    stdin: 'resolvconf resolvconf/linkify-resolvconf boolean false'
  changed_when: false
  when:
    - ansible_virtualization_role is defined
    - ansible_virtualization_role == 'guest'
    - "'docker' in ansible_virtualization_tech_guest"

- name: Wireguard | Installing WireGuard DNS-Util
  ansible.builtin.apt:
    pkg: ['resolvconf']
    state: present
  register: wg_resolvconf_setup
  when: WG_CONFIG.support.dns
  tags: [base]

# needed as the 'resolvconf' installation sometimes leads to temporary issues with name-resolution..
- name: Wireguard | Restarting dns-daemon to enable DNS-Util
  ansible.builtin.systemd:
    name: 'systemd-resolved.service'
    state: restarted
  when:
    - WG_CONFIG.support.dns
    - wg_resolvconf_setup.changed
  tags: [base]

- name: Wireguard | Configuring sysctl to allow traffic forwarding
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_dict: "{{ WG_HC.sysctl.forwarding.enable | bool }}"
  when:
    - WG_CONFIG.support.traffic_forwarding
    - "'docker' not in ansible_virtualization_tech_guest"
  tags: [base]

- name: Wireguard | Configuring sysctl to dis-allow traffic forwarding
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_dict: "{{ WG_HC.sysctl.forwarding.disable }}"
  when:
    - not WG_CONFIG.support.traffic_forwarding
    - "'docker' not in ansible_virtualization_tech_guest"
  tags: [base]

- name: Wireguard | Enabling dynamic debug
  ansible.builtin.command:
    cmd: 'tee /sys/kernel/debug/dynamic_debug/control'
    stdin: 'module wireguard +p'
  when: WG_CONFIG.debug
  changed_when: false
  ignore_errors: true

- name: Wireguard | Disabling dynamic debug
  ansible.builtin.command:
    cmd: 'tee /sys/kernel/debug/dynamic_debug/control'
    stdin: 'module wireguard -p'
  when: not WG_CONFIG.debug
  changed_when: false
  ignore_errors: true

- name: Wireguard | Creating directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: 'root'
    group: 'root'
  loop:
    - "{{ WG_HC.path_config }}"
    - "{{ WG_CONFIG.path_keys }}"
    - "/etc/systemd/system/{{ WG_HC.wg_svc }}@.service.d"
  tags: [base, config]

- name: Wireguard | Adding service settings
  ansible.builtin.template:
    src: 'templates/etc/systemd/system/wg-quick@.service.d/override.conf.j2'
    dest: "/etc/systemd/system/{{ WG_HC.wg_svc }}@.service.d/override.conf"
    mode: 0644
  tags: [base, config]

- name: Wireguard | Purging tunnels
  ansible.builtin.import_tasks: purge.yml
  when: WG_CONFIG.purge_orphaned_tunnels
  tags: [purge, tunnels, config]

- name: Wireguard | Processing topologies
  ansible.builtin.include_tasks: topology/main.yml
  when:
    - "inventory_hostname in topology.peers"
    - only_topo is undefined or only_topo == name
  vars:
    topo_name: "{{ topo_item.key | safe_int_name }}"
    topology: "{{ defaults_topology | combine(topo_item.value, recursive=true) }}"
  loop_control:
    loop_var: topo_item
  with_dict: "{{ WG_CONFIG.topologies }}"
  no_log: true
  tags: [purge, tunnels, config]
  args:
    apply:
      tags: [purge, tunnels, config]
